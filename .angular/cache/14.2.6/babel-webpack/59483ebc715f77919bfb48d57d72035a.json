{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\n\nclass BaseLoginProvider {\n  constructor() {}\n\n  loadScript(id, src, onload, parentElement = null) {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n\n      parentElement.appendChild(signInJS);\n    }\n  }\n\n}\n\nclass SocialUser {}\n\nclass GoogleLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'email'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/api.js', () => {\n          gapi.load('client:auth2', () => {\n            gapi.client.init(Object.assign(Object.assign({}, this.initOptions), {\n              client_id: this.clientId\n            })).then(() => {\n              this.auth2 = gapi.auth2.getAuthInstance();\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus(loginStatusOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);\n    return new Promise((resolve, reject) => {\n      if (this.auth2.isSignedIn.get()) {\n        const user = new SocialUser();\n        const profile = this.auth2.currentUser.get().getBasicProfile();\n        const authResponse = this.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object\n\n        this.setUserProfile(user, profile);\n        user.response = authResponse;\n\n        const resolveUser = authenticationResponse => {\n          user.authToken = authenticationResponse.access_token;\n          user.idToken = authenticationResponse.id_token;\n          resolve(user);\n        };\n\n        if (options.refreshToken) {\n          this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\n        } else {\n          resolveUser(authResponse);\n        }\n      } else {\n        reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      const offlineAccess = options && options.offline_access;\n      const promise = !offlineAccess ? this.auth2.signIn(signInOptions) : this.auth2.grantOfflineAccess(signInOptions);\n      promise.then(response => {\n        const user = new SocialUser();\n\n        if (response && response.code) {\n          user.authorizationCode = response.code;\n        } else {\n          const profile = this.auth2.currentUser.get().getBasicProfile();\n          const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n          const token = authResponse.access_token;\n          const backendToken = authResponse.id_token;\n          this.setUserProfile(user, profile);\n          user.authToken = token;\n          user.idToken = backendToken;\n          user.response = authResponse;\n        }\n\n        resolve(user);\n      }, closed => {\n        reject(closed);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      let signOutPromise;\n\n      if (revoke) {\n        signOutPromise = this.auth2.disconnect();\n      } else {\n        signOutPromise = this.auth2.signOut();\n      }\n\n      signOutPromise.then(err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  setUserProfile(user, profile) {\n    user.id = profile.getId();\n    user.name = profile.getName();\n    user.email = profile.getEmail();\n    user.photoUrl = profile.getImageUrl();\n    user.firstName = profile.getGivenName();\n    user.lastName = profile.getFamilyName();\n  }\n\n}\n\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\n\nclass SocialAuthService {\n  /**\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n   */\n  constructor(config) {\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n\n    if (config instanceof Promise) {\n      config.then(config => {\n        this.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n\n\n  get authState() {\n    return this._authState.asObservable();\n  }\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\n\n\n  get initState() {\n    return this._initState.asObservable();\n  }\n\n  initialize(config) {\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n    const {\n      onError = console.error\n    } = config;\n    config.providers.forEach(item => {\n      this.providers.set(item.id, item.provider);\n    });\n    Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize())).then(() => {\n      if (this.autoLogin) {\n        const loginStatusPromises = [];\n        let loggedIn = false;\n        this.providers.forEach((provider, key) => {\n          let promise = provider.getLoginStatus();\n          loginStatusPromises.push(promise);\n          promise.then(user => {\n            user.provider = key;\n            this._user = user;\n\n            this._authState.next(user);\n\n            loggedIn = true;\n          }).catch(console.debug);\n        });\n        Promise.all(loginStatusPromises).catch(() => {\n          if (!loggedIn) {\n            this._user = null;\n\n            this._authState.next(null);\n          }\n        });\n      }\n    }).catch(error => {\n      onError(error);\n    }).finally(() => {\n      this.initialized = true;\n\n      this._initState.next(this.initialized);\n\n      this._initState.complete();\n    });\n  }\n\n  refreshAuthToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n      } else {\n        const providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.getLoginStatus({\n            refreshToken: true\n          }).then(user => {\n            user.provider = providerId;\n            this._user = user;\n\n            this._authState.next(user);\n\n            resolve();\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\n   * A method used to sign in a user with a specific `LoginProvider`.\n   *\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\n   * @param signInOptions Optional `LoginProvider` specific arguments\n   * @returns A `Promise` that resolves to the authenticated user information\n   */\n\n\n  signIn(providerId, signInOptions) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signIn(signInOptions).then(user => {\n            user.provider = providerId;\n            resolve(user);\n            this._user = user;\n\n            this._authState.next(user);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\n   * A method used to sign out the currently loggen in user.\n   *\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n   */\n\n\n  signOut(revoke = false) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (!this._user) {\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signOut(revoke).then(() => {\n            resolve();\n            this._user = null;\n\n            this._authState.next(null);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n}\n\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\n\nSocialAuthService.ɵfac = function SocialAuthService_Factory(t) {\n  return new (t || SocialAuthService)(i0.ɵɵinject('SocialAuthServiceConfig'));\n};\n\nSocialAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SocialAuthService,\n  factory: SocialAuthService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialAuthService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['SocialAuthServiceConfig']\n      }]\n    }];\n  }, null);\n})();\n/**\n * The main module of angularx-social-login library.\n */\n\n\nclass SocialLoginModule {\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static initialize(config) {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [SocialAuthService, {\n        provide: 'SocialAuthServiceConfig',\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nSocialLoginModule.ɵfac = function SocialLoginModule_Factory(t) {\n  return new (t || SocialLoginModule)(i0.ɵɵinject(SocialLoginModule, 12));\n};\n\nSocialLoginModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SocialLoginModule\n});\nSocialLoginModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [SocialAuthService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialLoginModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [SocialAuthService]\n    }]\n  }], function () {\n    return [{\n      type: SocialLoginModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})(); // Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\n\nclass DummyLoginProvider extends BaseLoginProvider {\n  constructor(dummy) {\n    super();\n\n    if (dummy) {\n      this.dummy = dummy;\n    } else {\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\n    } // Start not logged in\n\n\n    this.loggedIn = false;\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this.loggedIn) {\n        resolve(this.dummy);\n      } else {\n        reject('No user is currently logged in.');\n      }\n    });\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = true;\n      resolve(this.dummy);\n    });\n  }\n\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = false;\n      resolve();\n    });\n  }\n\n}\n\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n  id: '1234567890',\n  name: 'Mickey Mouse',\n  email: 'mickey@mouse.com',\n  firstName: 'Mickey',\n  lastName: 'Mouse',\n  authToken: 'dummyAuthToken',\n  photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n  provider: 'DUMMY',\n  idToken: 'dummyIdToken',\n  authorizationCode: 'dummyAuthCode',\n  response: {}\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {}) {\n    super();\n    this.clientId = clientId;\n    this.requestOptions = {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v10.0'\n    };\n    this.requestOptions = Object.assign(Object.assign({}, this.requestOptions), initOptions);\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: this.requestOptions.version\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus(response => {\n        if (response.status === 'connected') {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${this.requestOptions.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.requestOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      FB.login(response => {\n        if (response.authResponse) {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${options.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject('User cancelled login or did not fully authorize.');\n        }\n      }, options);\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      FB.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n}\n\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'profile',\n    scope_data: {\n      profile: {\n        essential: false\n      }\n    },\n    redirect_uri: location.origin\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n\n  initialize() {\n    let amazonRoot = null;\n\n    if (document) {\n      amazonRoot = document.createElement('div');\n      amazonRoot.id = 'amazon-root';\n      document.body.appendChild(amazonRoot);\n    }\n\n    window.onAmazonLoginReady = () => {\n      amazon.Login.setClientId(this.clientId);\n    };\n\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n          resolve();\n        }, amazonRoot);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      let token = this.retrieveToken();\n\n      if (token) {\n        amazon.Login.retrieveProfile(token, response => {\n          if (response.success) {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.response = response.profile;\n            resolve(user);\n          } else {\n            reject(response.error);\n          }\n        });\n      } else {\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      amazon.Login.authorize(options, authResponse => {\n        if (authResponse.error) {\n          reject(authResponse.error);\n        } else {\n          amazon.Login.retrieveProfile(authResponse.access_token, response => {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.authToken = authResponse.access_token;\n            user.response = response.profile;\n            this.persistToken(authResponse.access_token);\n            resolve(user);\n          });\n        }\n      });\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      try {\n        amazon.Login.logout();\n        this.clearToken();\n        resolve();\n      } catch (err) {\n        reject(err.message);\n      }\n    });\n  }\n\n  persistToken(token) {\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n  }\n\n  retrieveToken() {\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n  clearToken() {\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n}\n\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    fields: 'photo_max,contacts',\n    version: '5.124'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.VK_API_URL = '//vk.com/js/api/openapi.js';\n    this.VK_API_GET_USER = 'users.get';\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n          VK.init({\n            apiId: this.clientId\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      VK.Auth.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n  signInInternal(resolve, reject) {\n    VK.Auth.login(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  getUser(userId, token, resolve) {\n    VK.Api.call(this.VK_API_GET_USER, {\n      user_id: userId,\n      fields: this.initOptions.fields,\n      v: this.initOptions.version\n    }, userResponse => {\n      resolve(this.createUser(Object.assign({}, {\n        token\n      }, userResponse.response[0])));\n    });\n  }\n\n  getLoginStatusInternal(resolve, reject) {\n    VK.Auth.getLoginStatus(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  createUser(response) {\n    const user = new SocialUser();\n    user.id = response.id;\n    user.name = `${response.first_name} ${response.last_name}`;\n    user.photoUrl = response.photo_max;\n    user.authToken = response.token;\n    return user;\n  }\n\n}\n\nVKLoginProvider.PROVIDER_ID = 'VK';\n/**\n * Protocol modes supported by MSAL.\n */\n\nvar ProtocolMode;\n\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\n\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\n\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = {\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'email', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.js', () => {\n        var _a;\n\n        try {\n          const config = {\n            auth: {\n              clientId: this.clientId,\n              redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n              authority: this.initOptions.authority,\n              knownAuthorities: this.initOptions.knownAuthorities,\n              protocolMode: this.initOptions.protocolMode,\n              clientCapabilities: this.initOptions.clientCapabilities\n            },\n            cache: !this.initOptions.cacheLocation ? null : {\n              cacheLocation: this.initOptions.cacheLocation\n            }\n          };\n          this._instance = new msal.PublicClientApplication(config);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n\n  getSocialUser(loginResponse) {\n    return new Promise((resolve, reject) => {\n      //After login, use Microsoft Graph API to get user info\n      let meRequest = new XMLHttpRequest();\n\n      meRequest.onreadystatechange = () => {\n        if (meRequest.readyState == 4) {\n          try {\n            if (meRequest.status == 200) {\n              let userInfo = JSON.parse(meRequest.responseText);\n              let user = new SocialUser();\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n              user.id = loginResponse.idToken;\n              user.authToken = loginResponse.accessToken;\n              user.name = loginResponse.idTokenClaims.name;\n              user.email = loginResponse.account.username;\n              user.idToken = loginResponse.idToken;\n              user.response = loginResponse;\n              user.firstName = userInfo.givenName;\n              user.lastName = userInfo.surname;\n              resolve(user);\n            } else {\n              reject(`Error retrieving user info: ${meRequest.status}`);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }\n      }; //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n\n\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n\n      try {\n        meRequest.send();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = this._instance.getAllAccounts();\n\n      if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n        const loginResponse = yield this._instance.ssoSilent({\n          scopes: this.initOptions.scopes,\n          loginHint: accounts[0].username\n        });\n        return yield this.getSocialUser(loginResponse);\n      } else {\n        throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n      }\n    });\n  }\n\n  signIn() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const loginResponse = yield this._instance.loginPopup({\n        scopes: this.initOptions.scopes,\n        prompt: this.initOptions.prompt\n      });\n      return yield this.getSocialUser(loginResponse);\n    });\n  }\n\n  signOut(revoke) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = this._instance.getAllAccounts();\n\n      if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n        yield this._instance.logoutPopup({\n          account: accounts[0],\n          postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n        });\n      }\n    });\n  }\n\n}\n\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":{"version":3,"names":["i0","Injectable","Inject","NgModule","Optional","SkipSelf","ReplaySubject","AsyncSubject","CommonModule","__awaiter","BaseLoginProvider","constructor","loadScript","id","src","onload","parentElement","document","getElementById","signInJS","createElement","async","head","appendChild","SocialUser","GoogleLoginProvider","clientId","initOptions","scope","initialize","Promise","resolve","reject","PROVIDER_ID","gapi","load","client","init","Object","assign","client_id","then","auth2","getAuthInstance","catch","err","getLoginStatus","loginStatusOptions","options","isSignedIn","get","user","profile","currentUser","getBasicProfile","authResponse","getAuthResponse","setUserProfile","response","resolveUser","authenticationResponse","authToken","access_token","idToken","id_token","refreshToken","reloadAuthResponse","signIn","signInOptions","offlineAccess","offline_access","promise","grantOfflineAccess","code","authorizationCode","token","backendToken","closed","signOut","revoke","signOutPromise","disconnect","getId","name","getName","email","getEmail","photoUrl","getImageUrl","firstName","getGivenName","lastName","getFamilyName","SocialAuthService","config","providers","Map","autoLogin","_user","_authState","initialized","_initState","authState","asObservable","initState","undefined","onError","console","error","forEach","item","set","provider","all","Array","from","values","map","loginStatusPromises","loggedIn","key","push","next","debug","finally","complete","refreshAuthToken","providerId","ERR_NOT_INITIALIZED","ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN","providerObject","ERR_LOGIN_PROVIDER_NOT_FOUND","ERR_NOT_LOGGED_IN","ɵfac","ɵprov","type","decorators","args","SocialLoginModule","parentModule","Error","ngModule","provide","useValue","ɵmod","ɵinj","imports","DummyLoginProvider","dummy","DEFAULT_USER","FacebookLoginProvider","requestOptions","locale","fields","version","FB","appId","autoLogAppEvents","cookie","xfbml","status","api","fbUser","accessToken","first_name","last_name","login","logout","AmazonLoginProvider","scope_data","essential","redirect_uri","location","origin","amazonRoot","body","window","onAmazonLoginReady","amazon","Login","setClientId","retrieveToken","retrieveProfile","success","CustomerId","Name","PrimaryEmail","authorize","persistToken","clearToken","message","localStorage","setItem","getItem","removeItem","VKLoginProvider","VK_API_URL","VK_API_GET_USER","VK","apiId","getLoginStatusInternal","signInInternal","Auth","loginResponse","getUser","session","mid","sid","userId","Api","call","user_id","v","userResponse","createUser","photo_max","ProtocolMode","COMMON_AUTHORITY","MicrosoftLoginProvider","authority","scopes","knownAuthorities","protocolMode","AAD","clientCapabilities","cacheLocation","_a","auth","redirectUri","cache","_instance","msal","PublicClientApplication","e","getSocialUser","meRequest","XMLHttpRequest","onreadystatechange","readyState","userInfo","JSON","parse","responseText","idTokenClaims","account","username","givenName","surname","open","setRequestHeader","send","accounts","getAllAccounts","length","ssoSilent","loginHint","loginPopup","prompt","_b","logoutPopup","postLogoutRedirectUri","logout_redirect_uri","href"],"sources":["C:/Users/syeds/Workspace/Angular projects/Checklister/Checklister/node_modules/angularx-social-login/fesm2015/angularx-social-login.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\n\nclass BaseLoginProvider {\n    constructor() { }\n    loadScript(id, src, onload, parentElement = null) {\n        // get document if platform is only browser\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\n            let signInJS = document.createElement('script');\n            signInJS.async = true;\n            signInJS.src = src;\n            signInJS.onload = onload;\n            if (!parentElement) {\n                parentElement = document.head;\n            }\n            parentElement.appendChild(signInJS);\n        }\n    }\n}\n\nclass SocialUser {\n}\n\nclass GoogleLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = { scope: 'email' }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/api.js', () => {\n                    gapi.load('client:auth2', () => {\n                        gapi.client.init(Object.assign(Object.assign({}, this.initOptions), { client_id: this.clientId }))\n                            .then(() => {\n                            this.auth2 = gapi.auth2.getAuthInstance();\n                            resolve();\n                        })\n                            .catch((err) => {\n                            reject(err);\n                        });\n                    });\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus(loginStatusOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);\n        return new Promise((resolve, reject) => {\n            if (this.auth2.isSignedIn.get()) {\n                const user = new SocialUser();\n                const profile = this.auth2.currentUser.get().getBasicProfile();\n                const authResponse = this.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object\n                this.setUserProfile(user, profile);\n                user.response = authResponse;\n                const resolveUser = authenticationResponse => {\n                    user.authToken = authenticationResponse.access_token;\n                    user.idToken = authenticationResponse.id_token;\n                    resolve(user);\n                };\n                if (options.refreshToken) {\n                    this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\n                }\n                else {\n                    resolveUser(authResponse);\n                }\n            }\n            else {\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            const offlineAccess = options && options.offline_access;\n            const promise = !offlineAccess\n                ? this.auth2.signIn(signInOptions)\n                : this.auth2.grantOfflineAccess(signInOptions);\n            promise\n                .then((response) => {\n                const user = new SocialUser();\n                if (response && response.code) {\n                    user.authorizationCode = response.code;\n                }\n                else {\n                    const profile = this.auth2.currentUser.get().getBasicProfile();\n                    const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n                    const token = authResponse.access_token;\n                    const backendToken = authResponse.id_token;\n                    this.setUserProfile(user, profile);\n                    user.authToken = token;\n                    user.idToken = backendToken;\n                    user.response = authResponse;\n                }\n                resolve(user);\n            }, (closed) => {\n                reject(closed);\n            })\n                .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n    signOut(revoke) {\n        return new Promise((resolve, reject) => {\n            let signOutPromise;\n            if (revoke) {\n                signOutPromise = this.auth2.disconnect();\n            }\n            else {\n                signOutPromise = this.auth2.signOut();\n            }\n            signOutPromise\n                .then((err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n    setUserProfile(user, profile) {\n        user.id = profile.getId();\n        user.name = profile.getName();\n        user.email = profile.getEmail();\n        user.photoUrl = profile.getImageUrl();\n        user.firstName = profile.getGivenName();\n        user.lastName = profile.getFamilyName();\n    }\n}\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\nclass SocialAuthService {\n    /**\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n     */\n    constructor(config) {\n        this.providers = new Map();\n        this.autoLogin = false;\n        this._user = null;\n        this._authState = new ReplaySubject(1);\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n        this.initialized = false;\n        this._initState = new AsyncSubject();\n        if (config instanceof Promise) {\n            config.then((config) => {\n                this.initialize(config);\n            });\n        }\n        else {\n            this.initialize(config);\n        }\n    }\n    /** An `Observable` that one can subscribe to get the current logged in user information */\n    get authState() {\n        return this._authState.asObservable();\n    }\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\n    get initState() {\n        return this._initState.asObservable();\n    }\n    initialize(config) {\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n        const { onError = console.error } = config;\n        config.providers.forEach((item) => {\n            this.providers.set(item.id, item.provider);\n        });\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize()))\n            .then(() => {\n            if (this.autoLogin) {\n                const loginStatusPromises = [];\n                let loggedIn = false;\n                this.providers.forEach((provider, key) => {\n                    let promise = provider.getLoginStatus();\n                    loginStatusPromises.push(promise);\n                    promise\n                        .then((user) => {\n                        user.provider = key;\n                        this._user = user;\n                        this._authState.next(user);\n                        loggedIn = true;\n                    })\n                        .catch(console.debug);\n                });\n                Promise.all(loginStatusPromises).catch(() => {\n                    if (!loggedIn) {\n                        this._user = null;\n                        this._authState.next(null);\n                    }\n                });\n            }\n        })\n            .catch((error) => {\n            onError(error);\n        })\n            .finally(() => {\n            this.initialized = true;\n            this._initState.next(this.initialized);\n            this._initState.complete();\n        });\n    }\n    refreshAuthToken(providerId) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n            }\n            else {\n                const providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .getLoginStatus({ refreshToken: true })\n                        .then((user) => {\n                        user.provider = providerId;\n                        this._user = user;\n                        this._authState.next(user);\n                        resolve();\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign in a user with a specific `LoginProvider`.\n     *\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\n     * @param signInOptions Optional `LoginProvider` specific arguments\n     * @returns A `Promise` that resolves to the authenticated user information\n     */\n    signIn(providerId, signInOptions) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else {\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signIn(signInOptions)\n                        .then((user) => {\n                        user.provider = providerId;\n                        resolve(user);\n                        this._user = user;\n                        this._authState.next(user);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign out the currently loggen in user.\n     *\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n     */\n    signOut(revoke = false) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (!this._user) {\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n            }\n            else {\n                let providerId = this._user.provider;\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signOut(revoke)\n                        .then(() => {\n                        resolve();\n                        this._user = null;\n                        this._authState.next(null);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n}\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\nSocialAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: SocialAuthService, deps: [{ token: 'SocialAuthServiceConfig' }], target: i0.ɵɵFactoryTarget.Injectable });\nSocialAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: SocialAuthService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: SocialAuthService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['SocialAuthServiceConfig']\n                }] }]; } });\n\n/**\n * The main module of angularx-social-login library.\n */\nclass SocialLoginModule {\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    static initialize(config) {\n        return {\n            ngModule: SocialLoginModule,\n            providers: [\n                SocialAuthService,\n                {\n                    provide: 'SocialAuthServiceConfig',\n                    useValue: config\n                }\n            ]\n        };\n    }\n}\nSocialLoginModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: SocialLoginModule, deps: [{ token: SocialLoginModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });\nSocialLoginModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: SocialLoginModule, imports: [CommonModule] });\nSocialLoginModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: SocialLoginModule, providers: [\n        SocialAuthService\n    ], imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: SocialLoginModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    providers: [\n                        SocialAuthService\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: SocialLoginModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; } });\n\n// Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\nclass DummyLoginProvider extends BaseLoginProvider {\n    constructor(dummy) {\n        super();\n        if (dummy) {\n            this.dummy = dummy;\n        }\n        else {\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\n        }\n        // Start not logged in\n        this.loggedIn = false;\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            if (this.loggedIn) {\n                resolve(this.dummy);\n            }\n            else {\n                reject('No user is currently logged in.');\n            }\n        });\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    }\n    signIn() {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = true;\n            resolve(this.dummy);\n        });\n    }\n    signOut(revoke) {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = false;\n            resolve();\n        });\n    }\n}\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n    id: '1234567890',\n    name: 'Mickey Mouse',\n    email: 'mickey@mouse.com',\n    firstName: 'Mickey',\n    lastName: 'Mouse',\n    authToken: 'dummyAuthToken',\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n    provider: 'DUMMY',\n    idToken: 'dummyIdToken',\n    authorizationCode: 'dummyAuthCode',\n    response: {},\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {}) {\n        super();\n        this.clientId = clientId;\n        this.requestOptions = {\n            scope: 'email,public_profile',\n            locale: 'en_US',\n            fields: 'name,email,picture,first_name,last_name',\n            version: 'v10.0',\n        };\n        this.requestOptions = Object.assign(Object.assign({}, this.requestOptions), initOptions);\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n                    FB.init({\n                        appId: this.clientId,\n                        autoLogAppEvents: true,\n                        cookie: true,\n                        xfbml: true,\n                        version: this.requestOptions.version,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            FB.getLoginStatus((response) => {\n                if (response.status === 'connected') {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${this.requestOptions.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal&access_token=' +\n                                authResponse.accessToken;\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n                }\n            });\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.requestOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            FB.login((response) => {\n                if (response.authResponse) {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal';\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject('User cancelled login or did not fully authorize.');\n                }\n            }, options);\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            FB.logout((response) => {\n                resolve();\n            });\n        });\n    }\n}\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        scope: 'profile',\n        scope_data: {\n            profile: { essential: false },\n        },\n        redirect_uri: location.origin,\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        let amazonRoot = null;\n        if (document) {\n            amazonRoot = document.createElement('div');\n            amazonRoot.id = 'amazon-root';\n            document.body.appendChild(amazonRoot);\n        }\n        window.onAmazonLoginReady = () => {\n            amazon.Login.setClientId(this.clientId);\n        };\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n                    resolve();\n                }, amazonRoot);\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            let token = this.retrieveToken();\n            if (token) {\n                amazon.Login.retrieveProfile(token, (response) => {\n                    if (response.success) {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.response = response.profile;\n                        resolve(user);\n                    }\n                    else {\n                        reject(response.error);\n                    }\n                });\n            }\n            else {\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            amazon.Login.authorize(options, (authResponse) => {\n                if (authResponse.error) {\n                    reject(authResponse.error);\n                }\n                else {\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.authToken = authResponse.access_token;\n                        user.response = response.profile;\n                        this.persistToken(authResponse.access_token);\n                        resolve(user);\n                    });\n                }\n            });\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            try {\n                amazon.Login.logout();\n                this.clearToken();\n                resolve();\n            }\n            catch (err) {\n                reject(err.message);\n            }\n        });\n    }\n    persistToken(token) {\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n    }\n    retrieveToken() {\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n    clearToken() {\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n}\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        fields: 'photo_max,contacts',\n        version: '5.124',\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\n        this.VK_API_GET_USER = 'users.get';\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n                    VK.init({\n                        apiId: this.clientId,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n    }\n    signIn() {\n        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            VK.Auth.logout((response) => {\n                resolve();\n            });\n        });\n    }\n    signInInternal(resolve, reject) {\n        VK.Auth.login((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        });\n    }\n    getUser(userId, token, resolve) {\n        VK.Api.call(this.VK_API_GET_USER, {\n            user_id: userId,\n            fields: this.initOptions.fields,\n            v: this.initOptions.version,\n        }, (userResponse) => {\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\n        });\n    }\n    getLoginStatusInternal(resolve, reject) {\n        VK.Auth.getLoginStatus((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        });\n    }\n    createUser(response) {\n        const user = new SocialUser();\n        user.id = response.id;\n        user.name = `${response.first_name} ${response.last_name}`;\n        user.photoUrl = response.photo_max;\n        user.authToken = response.token;\n        return user;\n    }\n}\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\n * Protocol modes supported by MSAL.\n */\nvar ProtocolMode;\n(function (ProtocolMode) {\n    ProtocolMode[\"AAD\"] = \"AAD\";\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = {\n            authority: COMMON_AUTHORITY,\n            scopes: ['openid', 'email', 'profile', 'User.Read'],\n            knownAuthorities: [],\n            protocolMode: ProtocolMode.AAD,\n            clientCapabilities: [],\n            cacheLocation: 'sessionStorage'\n        };\n        this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.js', () => {\n                var _a;\n                try {\n                    const config = {\n                        auth: {\n                            clientId: this.clientId,\n                            redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n                            authority: this.initOptions.authority,\n                            knownAuthorities: this.initOptions.knownAuthorities,\n                            protocolMode: this.initOptions.protocolMode,\n                            clientCapabilities: this.initOptions.clientCapabilities\n                        },\n                        cache: !this.initOptions.cacheLocation ? null : {\n                            cacheLocation: this.initOptions.cacheLocation\n                        }\n                    };\n                    this._instance = new msal.PublicClientApplication(config);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    getSocialUser(loginResponse) {\n        return new Promise((resolve, reject) => {\n            //After login, use Microsoft Graph API to get user info\n            let meRequest = new XMLHttpRequest();\n            meRequest.onreadystatechange = () => {\n                if (meRequest.readyState == 4) {\n                    try {\n                        if (meRequest.status == 200) {\n                            let userInfo = JSON.parse(meRequest.responseText);\n                            let user = new SocialUser();\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n                            user.id = loginResponse.idToken;\n                            user.authToken = loginResponse.accessToken;\n                            user.name = loginResponse.idTokenClaims.name;\n                            user.email = loginResponse.account.username;\n                            user.idToken = loginResponse.idToken;\n                            user.response = loginResponse;\n                            user.firstName = userInfo.givenName;\n                            user.lastName = userInfo.surname;\n                            resolve(user);\n                        }\n                        else {\n                            reject(`Error retrieving user info: ${meRequest.status}`);\n                        }\n                    }\n                    catch (err) {\n                        reject(err);\n                    }\n                }\n            };\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n            try {\n                meRequest.send();\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = this._instance.getAllAccounts();\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n                const loginResponse = yield this._instance.ssoSilent({\n                    scopes: this.initOptions.scopes,\n                    loginHint: accounts[0].username\n                });\n                return yield this.getSocialUser(loginResponse);\n            }\n            else {\n                throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n            }\n        });\n    }\n    signIn() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const loginResponse = yield this._instance.loginPopup({\n                scopes: this.initOptions.scopes,\n                prompt: this.initOptions.prompt,\n            });\n            return yield this.getSocialUser(loginResponse);\n        });\n    }\n    signOut(revoke) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = this._instance.getAllAccounts();\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n                yield this._instance.logoutPopup({\n                    account: accounts[0],\n                    postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n                });\n            }\n        });\n    }\n}\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}